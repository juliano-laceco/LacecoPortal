generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model client {
  client_id         Int                 @id @default(autoincrement())
  client_name       String              @db.VarChar(255)
  joined_on         DateTime            @db.Date
  geography         String              @db.VarChar(255)
  sector            String              @db.VarChar(255)
  website           String?             @db.VarChar(255)
  client_contact    client_contact[]
  projects          projects[]
  projects_versions projects_versions[]
}

model client_contact {
  client_contact_id Int    @id @default(autoincrement())
  contact_name      String @db.VarChar(255)
  contact_info      String @db.VarChar(255)
  contact_location  String @db.VarChar(255)
  client_id         Int
  client            client @relation(fields: [client_id], references: [client_id], onDelete: NoAction, onUpdate: NoAction, map: "client_contact_ibfk_1")

  @@index([client_id], map: "client_id")
}

model contract_type {
  contract_type_id   Int        @id @default(autoincrement())
  contract_type_name String     @db.VarChar(255)
  employee           employee[]
}

model discipline {
  discipline_id         Int        @id @default(autoincrement())
  discipline_name       String     @db.VarChar(255)
  assigned_on           DateTime   @db.Date
  head_of_department_id Int
  division_id           Int?
  employee              employee   @relation(fields: [head_of_department_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "discipline_ibfk_1")
  division              division?  @relation(fields: [division_id], references: [division_id], onDelete: NoAction, onUpdate: NoAction, map: "discipline_ibfk_2")
  position              position[]

  @@index([division_id], map: "division_id")
  @@index([head_of_department_id], map: "head_of_department_id")
}

model division {
  division_id   Int          @id @default(autoincrement())
  division_name String       @db.VarChar(255)
  discipline    discipline[]
}

model employee {
  employee_id                                                           Int                          @id @default(autoincrement())
  google_sub                                                            String?                      @db.VarChar(500)
  first_name                                                            String                       @db.VarChar(255)
  last_name                                                             String                       @db.VarChar(255)
  work_email                                                            String                       @db.VarChar(255)
  date_of_birth                                                         DateTime                     @db.Date
  nationality                                                           String                       @db.VarChar(500)
  marital_status                                                        String                       @db.Char(10)
  employee_hourly_cost                                                  Float?                       @db.Float
  major                                                                 String                       @db.VarChar(500)
  years_of_experience                                                   Int
  contract_type_id                                                      Int?
  contract_valid_till                                                   DateTime?                    @db.Date
  position_id                                                           Int
  country                                                               String                       @db.VarChar(150)
  employee_status_id                                                    Int                          @default(1)
  created_on                                                            DateTime                     @default(now()) @db.DateTime(0)
  role_id                                                               Int?
  discipline                                                            discipline[]
  contract_type                                                         contract_type?               @relation(fields: [contract_type_id], references: [contract_type_id], onDelete: NoAction, onUpdate: NoAction, map: "contract_type_id_fk")
  position                                                              position                     @relation(fields: [position_id], references: [position_id], onDelete: NoAction, onUpdate: NoAction, map: "pos_id_fk")
  role                                                                  role?                        @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "role_id_fk")
  employee_status                                                       employee_status              @relation(fields: [employee_status_id], references: [employee_status_id], onDelete: NoAction, onUpdate: NoAction, map: "status_id_fk")
  employee_status_history_employee_status_history_changed_byToemployee  employee_status_history[]    @relation("employee_status_history_changed_byToemployee")
  employee_status_history_employee_status_history_employee_idToemployee employee_status_history[]    @relation("employee_status_history_employee_idToemployee")
  employee_work_day                                                     employee_work_day[]
  employee_work_day_versions                                            employee_work_day_versions[]
  grade_history                                                         grade_history[]
  phase                                                                 phase[]
  phase_assignee                                                        phase_assignee[]
  phase_assignee_versions                                               phase_assignee_versions[]
  phase_history                                                         phase_history[]
  phase_versions                                                        phase_versions[]
  position_history_position_history_changed_byToemployee                position_history[]           @relation("position_history_changed_byToemployee")
  position_history_position_history_employee_idToemployee               position_history[]           @relation("position_history_employee_idToemployee")
  project_comment                                                       project_comment[]
  projects_projects_head_of_department_idToemployee                     projects[]                   @relation("projects_head_of_department_idToemployee")
  projects_projects_created_byToemployee                                projects[]                   @relation("projects_created_byToemployee")
  projects_versions_projects_versions_head_of_department_idToemployee   projects_versions[]          @relation("projects_versions_head_of_department_idToemployee")
  projects_versions_projects_versions_created_byToemployee              projects_versions[]          @relation("projects_versions_created_byToemployee")

  @@index([contract_type_id], map: "contract_type_id_fk")
  @@index([position_id], map: "pos_id_fk_idx")
  @@index([role_id], map: "role_id_fk_idx")
  @@index([employee_status_id], map: "status_id_fk")
}

model employee_status {
  employee_status_id                                                             Int                       @id @default(autoincrement())
  employee_status_name                                                           String                    @db.VarChar(255)
  employee                                                                       employee[]
  employee_status_history_employee_status_history_old_status_idToemployee_status employee_status_history[] @relation("employee_status_history_old_status_idToemployee_status")
  employee_status_history_employee_status_history_new_status_idToemployee_status employee_status_history[] @relation("employee_status_history_new_status_idToemployee_status")
}

model employee_status_history {
  employee_status_history_id                                             Int             @id @default(autoincrement())
  employee_id                                                            Int
  old_status_id                                                          Int
  new_status_id                                                          Int
  changed_on                                                             DateTime        @db.Date
  changed_by                                                             Int
  employee_employee_status_history_changed_byToemployee                  employee        @relation("employee_status_history_changed_byToemployee", fields: [changed_by], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "changed_by_employee_id")
  employee_employee_status_history_employee_idToemployee                 employee        @relation("employee_status_history_employee_idToemployee", fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "employee_status_history_ibfk_1")
  employee_status_employee_status_history_old_status_idToemployee_status employee_status @relation("employee_status_history_old_status_idToemployee_status", fields: [old_status_id], references: [employee_status_id], onDelete: NoAction, onUpdate: NoAction, map: "employee_status_history_ibfk_2")
  employee_status_employee_status_history_new_status_idToemployee_status employee_status @relation("employee_status_history_new_status_idToemployee_status", fields: [new_status_id], references: [employee_status_id], onDelete: NoAction, onUpdate: NoAction, map: "employee_status_history_ibfk_3")

  @@index([changed_by], map: "changed_by_employee_id_idx")
  @@index([employee_id], map: "employee_id")
  @@index([new_status_id], map: "new_status_id")
  @@index([old_status_id], map: "old_status_id")
}

model employee_work_day {
  employee_work_day_id Int            @id @default(autoincrement())
  phase_assignee_id    Int
  work_day             DateTime       @db.Date
  hours_worked         Float          @db.Float
  status               String         @db.VarChar(255)
  actioned_by          Int
  actioned_on          DateTime       @db.DateTime(0)
  rejection_reason     String?        @db.VarChar(255)
  phase_assignee       phase_assignee @relation(fields: [phase_assignee_id], references: [phase_assignee_id], onDelete: NoAction, onUpdate: NoAction, map: "employee_work_day_ibfk_1")
  employee             employee       @relation(fields: [actioned_by], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "employee_work_day_ibfk_2")

  @@index([actioned_by], map: "actioned_by")
  @@index([phase_assignee_id], map: "phase_assignee_id")
}

model employee_work_day_versions {
  employee_work_day_id    Int                     @id @default(autoincrement())
  phase_assignee_id       Int
  work_day                DateTime                @db.Date
  hours_worked            Float                   @db.Float
  status                  String                  @db.VarChar(255)
  actioned_by             Int
  actioned_on             DateTime                @db.DateTime(0)
  rejection_reason        String?                 @db.VarChar(255)
  phase_assignee_versions phase_assignee_versions @relation(fields: [phase_assignee_id], references: [phase_assignee_id], onDelete: NoAction, onUpdate: NoAction, map: "employee_work_day_versions_ibfk_1")
  employee                employee                @relation(fields: [actioned_by], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "employee_work_day_versions_ibfk_2")

  @@index([actioned_by], map: "actioned_by")
  @@index([phase_assignee_id], map: "phase_assignee_id")
}

model grade {
  grade_id      Int             @id @default(autoincrement())
  grade_code    String          @db.VarChar(55)
  grade_history grade_history[]
  position      position[]
}

model grade_history {
  grade_history_id Int      @id @default(autoincrement())
  employee_id      Int
  new_grade_id     Int
  changed_on       DateTime @default(now()) @db.DateTime(0)
  changed_by       Int
  employee         employee @relation(fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "grade_history_ibfk_1")
  grade            grade    @relation(fields: [new_grade_id], references: [grade_id], onDelete: NoAction, onUpdate: NoAction, map: "grade_history_ibfk_2")

  @@index([employee_id], map: "employee_id")
  @@index([changed_by], map: "grade_history_ibfk_3_idx")
  @@index([new_grade_id], map: "new_grade_id")
}

model holiday {
  holiday_id   Int            @id @default(autoincrement())
  holiday_name String         @db.VarChar(255)
  holiday_year holiday_year[]
}

model holiday_year {
  holiday_year_id    Int      @id @default(autoincrement())
  year               String   @db.Char(4)
  holiday_start_date DateTime @db.Date
  holiday_end_date   DateTime @db.Date
  holiday_id         Int
  holiday            holiday  @relation(fields: [holiday_id], references: [holiday_id], onDelete: NoAction, onUpdate: NoAction, map: "holiday_year_ibfk_1")

  @@index([holiday_id], map: "holiday_id")
}

model level_of_management {
  level_of_management_id   Int        @id @default(autoincrement())
  level_of_management_name String     @db.VarChar(255)
  position                 position[]
}

model permission {
  permission_id   Int               @id @default(autoincrement())
  permission_name String            @db.VarChar(255)
  role_permission role_permission[]
}

model phase {
  phase_id          Int              @id @default(autoincrement())
  phase_name        BigInt
  project_id        Int
  actioned_by       Int
  actioned_on       DateTime         @db.Date
  planned_startdate DateTime         @db.Date
  planned_enddate   DateTime         @db.Date
  start_date        DateTime?        @db.Date
  end_date          DateTime?        @db.Date
  status_id         Int
  employee          employee         @relation(fields: [actioned_by], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "phase_ibfk_1")
  phase_status      phase_status     @relation(fields: [status_id], references: [phase_status_id], onDelete: NoAction, onUpdate: NoAction, map: "phase_ibfk_2")
  projects          projects         @relation(fields: [project_id], references: [project_id], onDelete: NoAction, onUpdate: NoAction, map: "phase_ibfk_3")
  phase_assignee    phase_assignee[]
  phase_history     phase_history[]
  phase_versions    phase_versions[]

  @@index([actioned_by], map: "actioned_by")
  @@index([project_id], map: "project_id")
  @@index([status_id], map: "status_id")
}

model phase_assignee {
  phase_assignee_id   Int                   @id @default(autoincrement())
  assignee_id         Int
  work_done_hrs       Int
  expected_work_hrs   Int
  expected_start_date DateTime              @db.Date
  phase_id            Int
  employee_work_day   employee_work_day[]
  employee            employee              @relation(fields: [assignee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "phase_assignee_ibfk_1")
  phase               phase                 @relation(fields: [phase_id], references: [phase_id], onDelete: NoAction, onUpdate: NoAction, map: "phase_assignee_ibfk_2")
  projected_work_week projected_work_week[]

  @@index([assignee_id], map: "assignee_id")
  @@index([phase_id], map: "phase_id")
}

model phase_assignee_versions {
  phase_assignee_id            Int                            @id @default(autoincrement())
  assignee_id                  Int
  work_done_hrs                BigInt
  expected_work_hrs            BigInt
  expected_start_date          DateTime                       @db.Date
  phase_id                     Int
  employee_work_day_versions   employee_work_day_versions[]
  employee                     employee                       @relation(fields: [assignee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "phase_assignee_versions_ibfk_1")
  phase_versions               phase_versions                 @relation(fields: [phase_id], references: [phase_id], onDelete: NoAction, onUpdate: NoAction, map: "phase_assignee_versions_ibfk_2")
  projected_work_week_versions projected_work_week_versions[]

  @@index([assignee_id], map: "assignee_id")
  @@index([phase_id], map: "phase_id")
}

model phase_history {
  phase_history_id Int      @id @default(autoincrement())
  phase_id         Int
  actioned_on      DateTime @db.Date
  actioned_by      Int
  old_end_date     DateTime @db.Date
  new_end_date     DateTime @db.Date
  justification    String   @db.VarChar(255)
  employee         employee @relation(fields: [actioned_by], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "phase_actioned_by_employee_id")
  phase            phase    @relation(fields: [phase_id], references: [phase_id], onDelete: NoAction, onUpdate: NoAction, map: "phase_history_ibfk_1")

  @@index([actioned_by], map: "changed_by_employee_id_idx")
  @@index([phase_id], map: "phase_id")
}

model phase_status {
  phase_status_id   Int              @id @default(autoincrement())
  phase_status_name BigInt
  phase             phase[]
  phase_versions    phase_versions[]
}

model phase_versions {
  phase_id                Int                       @id @default(autoincrement())
  phase_name              BigInt
  actioned_by             Int
  actioned_on             DateTime                  @db.Date
  planned_startdate       DateTime                  @db.Date
  planned_enddate         DateTime                  @db.Date
  start_date              DateTime                  @db.Date
  end_date                DateTime                  @db.Date
  status_id               Int
  initial_phase_id        Int
  version                 Int
  phase_assignee_versions phase_assignee_versions[]
  phase                   phase                     @relation(fields: [initial_phase_id], references: [phase_id], onDelete: NoAction, onUpdate: NoAction, map: "phase_versions_ibfk_1")
  phase_status            phase_status              @relation(fields: [status_id], references: [phase_status_id], onDelete: NoAction, onUpdate: NoAction, map: "phase_versions_ibfk_2")
  employee                employee                  @relation(fields: [actioned_by], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "phase_versions_ibfk_3")

  @@index([actioned_by], map: "actioned_by")
  @@index([initial_phase_id], map: "initial_phase_id")
  @@index([status_id], map: "status_id")
}

model position {
  position_id            Int                 @id @default(autoincrement())
  position_name          String              @db.VarChar(255)
  discipline_id          Int
  level_of_management_id Int
  grade_id               Int
  employee               employee[]
  discipline             discipline          @relation(fields: [discipline_id], references: [discipline_id], onDelete: NoAction, onUpdate: NoAction, map: "ibfk_discipline_id_FK")
  grade                  grade               @relation(fields: [grade_id], references: [grade_id], onDelete: NoAction, onUpdate: NoAction, map: "ibfk_grade_id_FK")
  level_of_management    level_of_management @relation(fields: [level_of_management_id], references: [level_of_management_id], onDelete: NoAction, onUpdate: NoAction, map: "ibfk_level_of_management_id_FK")

  @@index([discipline_id], map: "ibfk_discipline_id_FK_idx")
  @@index([grade_id], map: "ibfk_grade_id_FK_idx")
  @@index([level_of_management_id], map: "ibfk_level_of_management_id_FK_idx")
}

model position_history {
  position_history_id                             Int      @id @default(autoincrement())
  employee_id                                     Int
  new_position_id                                 Int?
  new_employee_hourly_cost                        Float?   @db.Float
  changed_on                                      DateTime @default(now()) @db.DateTime(0)
  changed_by                                      Int
  employee_position_history_changed_byToemployee  employee @relation("position_history_changed_byToemployee", fields: [changed_by], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "position_history_changed_by_employee_id")
  employee_position_history_employee_idToemployee employee @relation("position_history_employee_idToemployee", fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "position_history_ibfk_1")

  @@index([employee_id], map: "employee_id")
  @@index([changed_by], map: "position_history_changed_by_employee_id_idx")
}

model project_category {
  project_category_id   Int                 @id @default(autoincrement())
  project_category_name String              @db.VarChar(255)
  projects              projects[]
  projects_versions     projects_versions[]
}

model project_comment {
  comment_id            Int               @id @default(autoincrement())
  project_id            Int
  comment_text          String            @db.VarChar(255)
  poster_id             Int
  is_reply              Boolean           @db.Bit(1)
  reply_to_id           Int?
  posted_on             BigInt
  projects              projects          @relation(fields: [project_id], references: [project_id], onDelete: NoAction, onUpdate: NoAction, map: "project_comment_ibfk_1")
  employee              employee          @relation(fields: [poster_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "project_comment_ibfk_2")
  project_comment       project_comment?  @relation("project_commentToproject_comment", fields: [reply_to_id], references: [comment_id], onDelete: NoAction, onUpdate: NoAction, map: "reply_to_id_comment_id")
  other_project_comment project_comment[] @relation("project_commentToproject_comment")

  @@index([poster_id], map: "poster_id")
  @@index([project_id], map: "project_id")
  @@index([reply_to_id], map: "reply_to_id_comment_id_idx")
}

model project_status {
  project_status_id   Int                 @id @default(autoincrement())
  project_status_name String              @db.VarChar(55)
  projects            projects[]
  projects_versions   projects_versions[]
}

model projected_work_week {
  projected_work_week_id Int            @id @default(autoincrement())
  phase_assignee_id      Int
  week_start             DateTime       @db.Date
  hours_expected         Int
  phase_assignee         phase_assignee @relation(fields: [phase_assignee_id], references: [phase_assignee_id], onDelete: NoAction, onUpdate: NoAction, map: "projected_work_week_ibfk_1")

  @@index([phase_assignee_id], map: "phase_assignee_id")
}

model projected_work_week_versions {
  projected_work_week_id  Int                     @id @default(autoincrement())
  phase_assignee_id       Int
  week_start              DateTime                @db.Date
  hours_expected          Int
  phase_assignee_versions phase_assignee_versions @relation(fields: [phase_assignee_id], references: [phase_assignee_id], onDelete: NoAction, onUpdate: NoAction, map: "projected_work_week_versions_ibfk_1")

  @@index([phase_assignee_id], map: "phase_assignee_id")
}

model projects {
  project_id                                        Int                 @id @default(autoincrement())
  code                                              String              @db.VarChar(255)
  title                                             String              @db.VarChar(255)
  client_id                                         Int
  geography                                         String              @db.VarChar(255)
  baseline_budget                                   BigInt
  variance                                          Float               @default(0) @db.Float
  BUA                                               Int
  Landscape                                         Int
  ParkingArea                                       Int
  DesignArea                                        Int
  planned_startdate                                 DateTime            @db.Date
  planned_enddate                                   DateTime            @db.Date
  start_date                                        DateTime?           @db.Date
  end_date                                          DateTime?           @db.Date
  head_of_department_id                             Int
  project_status_id                                 Int
  category_id                                       Int
  created_on                                        DateTime            @db.DateTime(0)
  created_by                                        Int
  phase                                             phase[]
  project_comment                                   project_comment[]
  client                                            client              @relation(fields: [client_id], references: [client_id], onDelete: NoAction, onUpdate: NoAction, map: "projects_ibfk_1")
  employee_projects_head_of_department_idToemployee employee            @relation("projects_head_of_department_idToemployee", fields: [head_of_department_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "projects_ibfk_2")
  project_status                                    project_status      @relation(fields: [project_status_id], references: [project_status_id], onDelete: NoAction, onUpdate: NoAction, map: "projects_ibfk_3")
  project_category                                  project_category    @relation(fields: [category_id], references: [project_category_id], onDelete: NoAction, onUpdate: NoAction, map: "projects_ibfk_4")
  employee_projects_created_byToemployee            employee            @relation("projects_created_byToemployee", fields: [created_by], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "projects_ibfk_5")
  projects_versions                                 projects_versions[]

  @@index([category_id], map: "category_id")
  @@index([client_id], map: "client_id")
  @@index([created_by], map: "created_by")
  @@index([head_of_department_id], map: "head_of_department_id")
  @@index([project_status_id], map: "project_status_id")
}

model projects_versions {
  project_id                                                 Int              @id @default(autoincrement())
  code                                                       String           @db.VarChar(255)
  title                                                      String           @db.VarChar(255)
  client_id                                                  Int
  geography                                                  String           @db.VarChar(255)
  baseline_budget                                            BigInt
  variance                                                   Float            @db.Float
  BUA                                                        Int
  Landscape                                                  Int
  ParkingArea                                                Int
  DesignArea                                                 Int
  planned_startdate                                          DateTime         @db.Date
  planned_enddate                                            DateTime         @db.Date
  start_date                                                 DateTime?        @db.Date
  end_date                                                   DateTime?        @db.Date
  created_on                                                 DateTime         @db.Date
  head_of_department_id                                      Int
  project_status_id                                          Int
  category_id                                                Int
  intial_project_id                                          Int
  created_by                                                 Int
  client                                                     client           @relation(fields: [client_id], references: [client_id], onDelete: NoAction, onUpdate: NoAction, map: "projects_versions_ibfk_1")
  employee_projects_versions_head_of_department_idToemployee employee         @relation("projects_versions_head_of_department_idToemployee", fields: [head_of_department_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "projects_versions_ibfk_2")
  project_status                                             project_status   @relation(fields: [project_status_id], references: [project_status_id], onDelete: NoAction, onUpdate: NoAction, map: "projects_versions_ibfk_3")
  project_category                                           project_category @relation(fields: [category_id], references: [project_category_id], onDelete: NoAction, onUpdate: NoAction, map: "projects_versions_ibfk_4")
  employee_projects_versions_created_byToemployee            employee         @relation("projects_versions_created_byToemployee", fields: [created_by], references: [employee_id], onDelete: NoAction, onUpdate: NoAction, map: "projects_versions_ibfk_5")
  projects                                                   projects         @relation(fields: [intial_project_id], references: [project_id], onDelete: NoAction, onUpdate: NoAction, map: "projects_versions_ibfk_6")

  @@index([category_id], map: "category_id")
  @@index([client_id], map: "client_id")
  @@index([created_by], map: "created_by")
  @@index([head_of_department_id], map: "head_of_department_id")
  @@index([intial_project_id], map: "intial_project_id")
  @@index([project_status_id], map: "project_status_id")
}

model role {
  role_id         Int               @id @default(autoincrement())
  role_name       String            @db.VarChar(255)
  employee        employee[]
  role_permission role_permission[]
}

model role_permission {
  role_permission_id Int        @id @default(autoincrement())
  role_id            Int
  permission_id      Int
  role               role       @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "role_permission_ibfk_1")
  permission         permission @relation(fields: [permission_id], references: [permission_id], onDelete: NoAction, onUpdate: NoAction, map: "role_permission_ibfk_2")

  @@index([permission_id], map: "permission_id")
  @@index([role_id], map: "role_id")
}

model schedule {
  schedule_id   Int             @id @default(autoincrement())
  schedule_name String?         @db.VarChar(255)
  schedule_year schedule_year[]
}

model schedule_year {
  schedule_year_id    Int      @id @default(autoincrement())
  year                String   @db.Char(4)
  schedule_start_date DateTime @db.Date
  schedule_end_date   DateTime @db.Date
  daily_work_hours    Float    @db.Float
  schedule_id         Int
  schedule            schedule @relation(fields: [schedule_id], references: [schedule_id], onDelete: NoAction, onUpdate: NoAction, map: "schedule_year_ibfk_1")

  @@index([schedule_id], map: "schedule_id")
}
